//! 字体渲染模块
//! 提供8x8点阵字体数据和字符渲染功能

use crate::constants::font::*;

/// 8x8点阵字体数据
/// 包含ASCII 32-127的字符定义
const FONT_DATA: [[u8; 8]; FONT_CHAR_COUNT] = [
    // 空格 (32)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // ! (33)
    [0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00],
    // " (34)
    [0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00],
    // # (35)
    [0x66, 0x66, 0xFF, 0x66, 0xFF, 0x66, 0x66, 0x00],
    // $ (36)
    [0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00],
    // % (37)
    [0x62, 0x66, 0x0C, 0x18, 0x30, 0x66, 0x46, 0x00],
    // & (38)
    [0x3C, 0x66, 0x3C, 0x38, 0x67, 0x66, 0x3F, 0x00],
    // ' (39)
    [0x06, 0x0C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    // ( (40)
    [0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00],
    // ) (41)
    [0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00],
    // * (42)
    [0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00],
    // + (43)
    [0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00],
    // , (44)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x30, 0x00],
    // - (45)
    [0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00],
    // . (46)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
    // / (47)
    [0x00, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00],
    // 0 (48)
    [0x3C, 0x66, 0x6E, 0x76, 0x66, 0x66, 0x3C, 0x00],
    // 1 (49)
    [0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7E, 0x00],
    // 2 (50)
    [0x3C, 0x66, 0x06, 0x0C, 0x30, 0x60, 0x7E, 0x00],
    // 3 (51)
    [0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00],
    // 4 (52)
    [0x06, 0x0E, 0x1E, 0x66, 0x7F, 0x06, 0x06, 0x00],
    // 5 (53)
    [0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00],
    // 6 (54)
    [0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00],
    // 7 (55)
    [0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00],
    // 8 (56)
    [0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00],
    // 9 (57)
    [0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00],
    // : (58)
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00],
    // ; (59)
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x30, 0x00],
    // < (60)
    [0x0E, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0E, 0x00],
    // = (61)
    [0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00],
    // > (62)
    [0x70, 0x18, 0x0C, 0x06, 0x0C, 0x18, 0x70, 0x00],
    // ? (63)
    [0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00],
    // @ (64)
    [0x3C, 0x66, 0x6E, 0x6E, 0x60, 0x62, 0x3C, 0x00],
    // A (65)
    [0x18, 0x3C, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    // B (66)
    [0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00],
    // C (67)
    [0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00],
    // D (68)
    [0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00],
    // E (69)
    [0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7E, 0x00],
    // F (70)
    [0x7E, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00],
    // G (71)
    [0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00],
    // H (72)
    [0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00],
    // I (73)
    [0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00],
    // J (74)
    [0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00],
    // K (75)
    [0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00],
    // L (76)
    [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00],
    // M (77)
    [0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00],
    // N (78)
    [0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00],
    // O (79)
    [0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    // P (80)
    [0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00],
    // Q (81)
    [0x3C, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x0E, 0x00],
    // R (82)
    [0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00],
    // S (83)
    [0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00],
    // T (84)
    [0x7E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],
    // U (85)
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00],
    // V (86)
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00],
    // W (87)
    [0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00],
    // X (88)
    [0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00],
    // Y (89)
    [0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x18, 0x00],
    // Z (90)
    [0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00],
    // [ (91)
    [0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00],
    // \ (92)
    [0x00, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x00],
    // ] (93)
    [0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00],
    // ^ (94)
    [0x18, 0x3C, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00],
    // _ (95)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF],
    // 其余字符使用空格填充 (96-127)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 96
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 97
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 98
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 99
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 100
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 101
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 102
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 103
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 104
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 105
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 106
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 107
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 108
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 109
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 110
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 111
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 112
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 113
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 114
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 115
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 116
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 117
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 118
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 119
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 120
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 121
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 122
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 123
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 124
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 125
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00], // 126
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]  // 127
];

/// 获取字符的字体数据
/// 
/// # 参数
/// * `c` - 要获取字体数据的字符
/// 
/// # 返回值
/// 返回字符对应的8x8点阵数据，如果字符不在支持范围内则返回空格的数据
pub fn get_char_data(c: char) -> &'static [u8; 8] {
    let char_code = c as usize;
    if char_code >= ASCII_PRINTABLE_START && char_code < ASCII_PRINTABLE_END {
        &FONT_DATA[char_code - ASCII_PRINTABLE_START]
    } else {
        &FONT_DATA[0] // 返回空格字符
    }
}

/// 检查字符是否为可打印字符
pub fn is_printable(c: char) -> bool {
    let char_code = c as usize;
    char_code >= ASCII_PRINTABLE_START && char_code < ASCII_PRINTABLE_END
}